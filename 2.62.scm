(define* (union-set set1 set2 #:key (result-set '()))
  (cond ((and (null? set1) (null? set2)) (reverse result-set))
        ((null? set1) (cons (reverse result-set) set2))
        ((null? set2) (cons (reverse result-set) set1))
        ((= (car set1) (car set2))
         (union-set (cdr set1) (cdr set2)
                    #:result-set (cons (car set1 result-set))
         )
        )
        ((< (car set1) (car set2))
         (union-set (cdr set1) set2
                    #:result-set (cons (car set1) result-set)
         )
        )
        (else ; (< (car set2) (car set1))
          (union-set set1 (cdr set2)
                     #:result-set (cons (car set2) result-set)
          )
        )
)
