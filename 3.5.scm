(define (square num) (* num num))

(define (rand-range low high)
  (let ((range (- high low)))
    (+ low (random range))
  )
)

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials)
          )
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)
           )
          )
          (#t
            (iter (- trials-remaining 1)
                  trials-passed)
          )
    )
  )
  (iter trials 0)
)

(define (estimate-integral num-trials rx1 rx2 ry1 ry2 centerx centery radius)
  (monte-carlo num-trials (lambda () (<= (+ (square (- (rand-range rx1 rx2) centerx))
                                            (square (- (rand-range ry1 ry2) centery))
                                         )
                                         (square radius)
                                     )
                          )
  )
)

