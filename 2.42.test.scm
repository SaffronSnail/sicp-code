(use-modules (srfi  srfi-64))
(load "2.42.scm")

(test-begin "adjoin-position")
(test-equal '(1) (adjoin-position 1 1 '()))
(test-equal '(1 2) (adjoin-position 2 2 '(1)))
(test-equal '(1 2 3) (adjoin-position 3 3 '(1 2)))
(test-end "adjoin-position")

(test-begin "index")
(define test-list (enumerate-interval 1 10))
(define (test-at i) (test-equal i (index i test-list)))
(map test-at test-list)
(test-end "index")

(test-begin "safe?")
(define* (all-false-except index len #:key (state '()))
  (if (= len 0)
    state
    (all-false-except index (- len 1) #:state (cons (= index len) state))
  )
)

(let* ((safe-board '(2 4 6 8 3 1 7 5))
       (horizontally-unsafe-board '(1 1 1 1 1 1 1 1))
       (diagonally-unsafe-board (enumerate-interval 1 8))
       (test-safe-board (lambda (index)
                          (test-equal (safe? index safe-board) '(#t #t #t #t #t #t #t #t))
                        )
       )
       (test-hor-board (lambda (index)
                         (test-equal (safe? index horizontally-unsafe-board) (all-false-except index 8))
                       )
       )
       (test-diag-board (lambda (index)
                          (test-equal (safe? index diagonally-unsafe-board) (all-false-except index 8))
                        )
       )
       (all-indexes (enumerate-interval 1 8))
      )
  (map test-safe-board all-indexes)
  (map test-hor-board all-indexes)
  (map test-diag-board all-indexes)
)
(test-end "safe?")

