(load "2.62.scm")
(load "2.63.scm")
(load "2.64.scm")

(define (union-set-tree s1 s2)
  (list->tree (union-set (tree->list s1) (tree->list s2)))
)

; from pg 209
(define (interesection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x1 (car set1)) (x2 (car set2)))
      (cond ((= x1 x2)
             (cons x1 (intersection-set (cdr set1) (cdr set2)))
            )
            ((< x1 x2)
             (intersetion-set (cdr set1) set2)
            )
            ((< x2 x1)
             (intersection-set set1 (cdr set2))
            )
      )
    )
  )
)

(define (intersection-set-tree s1 s2)
  (list->tree (intersection-set (tree->list s1) (tree->list s2)))
)
